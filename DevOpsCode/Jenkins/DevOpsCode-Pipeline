properties([pipelineTriggers([githubPush()])])


pipeline {
    parameters {
        string(name: 'environment', defaultValue: 'dev', description: 'Branch')
        booleanParam(name: 'autoApprove', defaultValue: true, description: 'Automatically run apply after generating plan?')
        booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
    }
    environment {
        AWS_ACCESS_KEY_ID       =   credentials('access_key_aws')
        AWS_SECRET_ACCESS_KEY   =   credentials('secret_key_aws')
    }
    agent any
    
    stages {
        stage('Terraform init') {
            steps {
                sh('terraform -chdir=DevOpsCode/Terraform init')
            }
        }
        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
                equals expected: true, actual: params.destroy
            }
            steps {
                sh("terraform -chdir=DevOpsCode/Terraform plan -out tfplan -var 'current_build=$BUILD_DISPLAY_NAME' -var 'current_environment=$environment' -no-color")
                sh("terraform -chdir=DevOpsCode/Terraform show -no-color tfplan > tfplan.txt")
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }


        stage('Terraform apply') {
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }

            steps { 
                sh("terraform -chdir=DevOpsCode/Terraform apply  -input=false -var 'current_build=$BUILD_DISPLAY_NAME' -var 'current_environment=$environment' -no-color --auto-approve")
            }
        }

        stage('Destroy') {
            when {
                equals expected: true, actual: params.destroy
            }
            steps {
                sh('terraform -chdir=DevOpsCode/Terraform destroy --auto-approve')
            }
        }
    }
}
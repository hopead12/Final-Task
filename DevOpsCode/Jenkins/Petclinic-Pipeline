properties([pipelineTriggers([githubPush()])])


pipeline {
parameters {
        string(name: 'environment', defaultValue: 'dev', description: 'Branch')
        string(name: 'workspace', defaultValue: 'Petclinic', description: 'Folder')
        string(name: 'version', defaultValue: '1', description: 'Version')
        booleanParam(name: 'autoApprove', defaultValue: true, description: 'Automatically run apply after generating plan?')
        booleanParam(name: 'destroy', defaultValue: false, description: 'Destroy Terraform build?')
    }
    environment {
        AWS_ACCESS_KEY_ID       =   credentials('access_key_aws')
        AWS_SECRET_ACCESS_KEY   =   credentials('secret_key_aws')
        MYSQL_USER              =   credentials('username_db')
        MYSQL_PASS              =   credentials('password_db')
        DOCKER_USER             =   credentials('docker_user')
        DOCKER_PASS             =   credentials('docker_pass')
    }
    agent {
        node {
            label 'build-server'
        }
    }
    stages {
        stage('Approval') {
            agent {
                node {
                    label 'deploy-server'
                }
            }
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
                equals expected: true, actual: params.destroy
            }
            steps {
                sh('terraform -chdir=DevOpsCode/Terraform init -migrate-state')
                sh('terraform -chdir=DevOpsCode/Terraform plan -out tfplan  -var current_version=$version -var current_environment=$environment -var usernamedb=$MYSQL_USER -var passworddb=$MYSQL_PASS -no-color')
                sh("terraform -chdir=DevOpsCode/Terraform show -no-color tfplan > tfplan.txt")
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }
        stage("Create Infrastructure & Build") {
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }
            parallel {
                stage('Build'){
                    steps {
                        dir("${workspace}") {
                            sh('chmod +x mvnw')
                            sh('./mvnw -q clean')
                            sh('./mvnw -q spring-javaformat:apply package')
                        }
                    }
                }
                
                stage('Create Infrastructure') {
                    agent {
                        node {
                            label 'deploy-server'
                        }
                    }
                    steps {
                        sh('terraform -chdir=DevOpsCode/Terraform init -migrate-state') 
                        sh('terraform -chdir=DevOpsCode/Terraform apply  -input=false  -var current_version=$version -var current_environment=$environment -var usernamedb=$MYSQL_USER -var passworddb=$MYSQL_PASS -no-color --auto-approve')
                    }
                }
            }
        }
        stage('Test'){
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }
            steps {
                 dir("${workspace}") {
                    sh './mvnw -q test'
                }
            }
        
        }
        stage('Deliver to DockerHub'){
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }
            steps{
                 dir("${workspace}") {
                    sh('docker build -t ${DOCKER_USER}/petclinic:${BUILD_NUMBER} .')
                    sh('echo ${DOCKER_PASS} | docker login --username ${DOCKER_USER} --password-stdin')
                    sh('docker push ${DOCKER_USER}/petclinic:${BUILD_NUMBER}')
                }   
            }
        }
        stage('Deploy') {
            agent {
                node {
                    label 'deploy-server'
                }
            }
            when {
                not {
                    equals expected: true, actual: params.destroy
                }
            }
            steps {
                sh('terraform -chdir=DevOpsCode/Terraform init -migrate-state')
                script {
                    DNS = sh(script: 'terraform -chdir=DevOpsCode/Terraform output Webserver_public_dns', returnStdout: true).trim()
                    DB_ENDPOINT = sh(script: 'terraform -chdir=DevOpsCode/Terraform output DBserver_public_ip_address', returnStdout: true).trim()
                    NAME_SSH_KEY = sh(script: 'terraform -chdir=DevOpsCode/Terraform output key_name_web', returnStdout: true).trim()
                    REPO         = "reinz12/petclinic"
                }
                sh("terraform -chdir=DevOpsCode/Terraform output -raw private_key_web > ~/.ssh/$NAME_SSH_KEY ; chmod 0600 ~/.ssh/$NAME_SSH_KEY")
                dir("DevOpsCode/Ansible"){
                    sh('chmod +x ec2.py')
                    sh("ansible-playbook -i ec2.py playbookdocker.yml -e tags_hosts=tag_Name_Web_${environment}* -e repo=$REPO -e version=$BUILD_NUMBER -e endpoint_db=$DB_ENDPOINT -e mysql_user=${MYSQL_USER} -e mysql_pass=${MYSQL_PASS} -e ansible_ssh_private_key_file=~/.ssh/$NAME_SSH_KEY")
                }
                script {
                    input("Please check this address ${DNS}")

                }
            }
        }

        stage('Destroy') {
            agent {
                node {
                    label 'deploy-server'
                }
            }
            when {
                equals expected: true, actual: params.destroy
            }
            steps {
                sh('terraform -chdir=DevOpsCode/Terraform init -migrate-state')
                sh('terraform -chdir=DevOpsCode/Terraform destroy -var usernamedb=$MYSQL_USER -var passworddb=$MYSQL_PASS --auto-approve')
            }
        }
    }
}
        
